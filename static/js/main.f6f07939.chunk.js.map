{"version":3,"sources":["App.js","index.js"],"names":["App","useState","cidade","setCidade","clima","setClima","obtendoClima","setObtendoClima","erro","setErro","erroGeo","setErroGeo","a","process","urlClima","fetch","then","response","json","data","cod","catch","error","console","message","useEffect","apigeo","latitude","longitude","url","results","components","city","country","navigator","geolocation","getCurrentPosition","position","obtemCidade","coords","code","Navbar","bg","Brand","href","Nav","className","Link","Form","inline","FormControl","type","value","placeholder","onChange","event","target","Button","variant","onClick","obtemClima","disabled","length","Spinner","size","animation","Jumbotron","Alert","onClose","dismissible","Heading","texto","Toast","delay","autohide","Header","Body","Row","Card","name","main","temp","temp_min","temp_max","Img","src","weather","icon","title","description","Title","Footer","Date","dt","toLocaleString","timeZone","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6f07939.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Form from 'react-bootstrap/Form'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Button from 'react-bootstrap/Button'\nimport { FaCloudversify, FaCloudRain, FaArrowDown, FaArrowUp } from 'react-icons/fa'\nimport Row from 'react-bootstrap/Row'\nimport Card from 'react-bootstrap/Card'\nimport Spinner from 'react-bootstrap/Spinner'\nimport Toast from 'react-bootstrap/Toast'\nimport Alert from 'react-bootstrap/Alert'\n\nfunction App() {\n  const [cidade, setCidade] = useState('')\n  const [clima, setClima] = useState(null)\n  const [obtendoClima, setObtendoClima] = useState(false)\n  const [erro, setErro] = useState(null)\n  const [erroGeo, setErroGeo] = useState(null)\n\n  const listaErrosGeo = [{\"codigo\":1, \"texto\": \"N√£o foi dada permiss√£o para o sistema encontrar a sua localiza√ß√£o.\"},\n                         {\"codigo\":2, \"texto\": \"N√£o foi poss√≠vel obter a sua localiza√ß√£o!\"},\n                         {\"codigo\":3, \"texto\": \"O tempo para obter a sua localiza√ß√£o foi expirado!\"}]\n\n  useEffect(()=> {\n    const apigeo = process.env.REACT_APP_APIGEO\n    if ('geolocation' in navigator){\n      navigator.geolocation.getCurrentPosition(function (position) {\n        //console.log(position)\n        obtemCidade(position.coords.latitude, position.coords.longitude)\n      }, function (error){\n        console.error(error)\n        setErroGeo(error.code)\n      })\n    }\n  async function obtemCidade(latitude, longitude){\n    let url =`https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${apigeo}`\n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      //console.log(data)\n      setCidade(data.results[0].components.city+', '+data.results[0].components.country)\n    })\n    .catch(function(error){\n      console.error(`N√£o foi poss√≠vel buscar a cidade a partir da Latitude e Longitude. Erro: ${error.message}`)\n    })\n  }\n  },[])\n\n  async function obtemClima(cidade) {\n    setObtendoClima(true)\n    const apiweather = process.env.REACT_APP_APIWEATHER\n    let urlClima = `http://api.openweathermap.org/data/2.5/weather?q=${cidade}&lang=pt&units=metric&appid=${apiweather}`\n    await fetch(urlClima)\n      .then(response => response.json())\n      .then(data => {\n        switch (data.cod) {\n          case '401':\n            setErro('A API Key informada √© inv√°lida!')\n            setClima(null)\n            break\n          case '404':\n            setErro('A cidade informada n√£o existe!')\n            setClima(null)\n            setCidade('')\n            break\n          case '429':\n            setErro('O uso gratuito da API foi excedido! (60 chamadas por minuto.)')\n            setClima(null)\n            break\n          default:\n            setClima(data)\n        }\n      })\n      .catch(function (error) {\n        console.error(`Erro ao obrter o clima: ${error.message}`)\n      })\n    setObtendoClima(false)\n  }\n\n  return (\n    <> {/* React Fragment */}\n      <Navbar bg=\"primary\">\n        <Navbar.Brand href=\"#inicio\">Fateclima</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"#inicio\">In√≠cio</Nav.Link>\n          <Nav.Link href=\"#contato\">Contato</Nav.Link>\n        </Nav>\n        <Form inline>\n          <FormControl type=\"text\" value={cidade} placeholder=\"Informe a cidade...\" onChange={event => setCidade(event.target.value)}></FormControl>\n  &nbsp;\n  <Button variant=\"secondary\" onClick={() => obtemClima(cidade)} disabled={cidade.length < 3}>\n            {obtendoClima ? <Spinner size=\"sm\" animation=\"grow\" variant=\"light\" /> : <FaCloudversify />} Obter Clima</Button>\n        </Form>\n      </Navbar>\n      <Jumbotron>\n        <h1><FaCloudRain /> Fateclima</h1>\n        <p>Consulte o clima de qualquer cidade do mundo. <br></br> App desenvolvido em ReactJS e integrado com a API Open WeatherMap.</p>\n      </Jumbotron>\n      {erroGeo &&\n      <Alert variant=\"danger\" onClose={()=> setErroGeo(null)} dismissible>\n        <Alert.Heading>Ops! Ocorreu um erro ao obter a sua localiza√ß√£o.</Alert.Heading>\n        <p>{listaErrosGeo[erroGeo].texto}</p>\n      </Alert>\n      }\n\n      {erro &&\n        <Toast onClose={() => setErro(null)} delay={5000} autohide className=\"bg-danger\">\n          <Toast.Header>\n            <strong className=\"mr-auto\">{erro}</strong>\n            <small>üò•</small>\n          </Toast.Header>\n          <Toast.Body className=\"bg-white text-danger\">Por favor, fa√ßa uma nova busca.</Toast.Body>\n        </Toast>\n      }\n      {obtendoClima &&\n        <Row className=\"justify-content-center\">\n          <Spinner animation=\"border\" variant=\"secondary\" />\n        </Row>\n      }\n\n      <Row className=\"justify-content-center\">\n        {clima &&\n          <Card bg=\"primary\" className=\"text-center\">\n            <Card.Header>\n              <h2>{clima.name}</h2>\n              <h3><strong>{clima.main.temp}</strong>&#x2103;</h3>\n              <h5>M√≠n: <strong>{clima.main.temp_min}</strong>&#x2103;<FaArrowDown className=\"text-danger\" />  M√°x: <strong>{clima.main.temp_max}</strong>&#x2103;<FaArrowUp className=\"text-success\" /></h5>\n            </Card.Header>\n            <Card.Body className=\"bg-white\">\n              <Card.Img src={`http://openweathermap.org/img/wn/${clima.weather[0].icon}@4x.png`}\n                title={clima.weather[0].description} />\n\n              <Card.Title className=\"text-dark\" >{clima.weather[0].description}</Card.Title>\n            </Card.Body>\n            <Card.Footer className=\"text-white\">\n              Atualizado em: {new Date(clima.dt * 1000).toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}\n            </Card.Footer>\n          </Card>\n        }\n      </Row>\n    </>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}